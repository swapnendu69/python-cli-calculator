# -*- coding: utf-8 -*-
"""python-cli-calculator.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1f6TR6uX74tCRTo5VkrwJh2vsR7sV3E7Q
"""

# 🧮 Enhanced Colab Calculator with Menu
import math
import os

class ColabCalculator:
    def __init__(self):
        self.history = []
        self.memory = 0

    def clear_screen(self):
        """Clear the console output"""
        os.system('clear' if os.name == 'posix' else 'cls')

    def show_menu(self):
        print("\n" + "=" * 50)
        print("🧮 ENHANCED COLAB CALCULATOR")
        print("=" * 50)
        print("1. ➕ Addition")
        print("2. ➖ Subtraction")
        print("3. ✖️ Multiplication")
        print("4. ➗ Division")
        print("5. 💪 Power")
        print("6. √ Square Root")
        print("7. 📊 Scientific Functions")
        print("8. 💾 Memory Functions")
        print("9. 📜 History")
        print("10. 🧹 Clear Screen")
        print("0. 🚪 Exit")
        print("=" * 50)

    def run(self):
        self.clear_screen()
        print("🎉 Welcome to Enhanced Colab Calculator!")

        while True:
            self.show_menu()
            choice = input("\n🎯 Enter your choice (0-10): ").strip()

            if choice == '0':
                print("👋 Thank you for using the calculator! Goodbye!")
                break
            elif choice == '1':
                self.addition()
            elif choice == '2':
                self.subtraction()
            elif choice == '3':
                self.multiplication()
            elif choice == '4':
                self.division()
            elif choice == '5':
                self.power()
            elif choice == '6':
                self.square_root()
            elif choice == '7':
                self.scientific_menu()
            elif choice == '8':
                self.memory_menu()
            elif choice == '9':
                self.show_history()
            elif choice == '10':
                self.clear_screen()
            else:
                print("❌ Invalid choice! Please try again.")

    def get_numbers(self, count=2):
        """Get numbers from user input"""
        numbers = []
        for i in range(count):
            while True:
                try:
                    num = float(input(f"Enter number {i+1}: "))
                    numbers.append(num)
                    break
                except ValueError:
                    print("❌ Please enter a valid number!")
        return numbers

    def add_to_history(self, operation, result):
        """Add calculation to history"""
        entry = f"{operation} = {result}"
        self.history.append(entry)
        if len(self.history) > 10:  # Keep only last 10 entries
            self.history.pop(0)

    def show_history(self):
        """Show calculation history"""
        print("\n📜 CALCULATION HISTORY:")
        if not self.history:
            print("No calculations yet!")
        else:
            for i, entry in enumerate(self.history, 1):
                print(f"{i}. {entry}")

    def addition(self):
        print("\n➕ ADDITION")
        nums = self.get_numbers()
        result = sum(nums)
        operation = " + ".join(map(str, nums))
        self.add_to_history(operation, result)
        print(f"✅ Result: {operation} = {result}")

    def subtraction(self):
        print("\n➖ SUBTRACTION")
        nums = self.get_numbers()
        result = nums[0] - nums[1]
        operation = f"{nums[0]} - {nums[1]}"
        self.add_to_history(operation, result)
        print(f"✅ Result: {operation} = {result}")

    def multiplication(self):
        print("\n✖️ MULTIPLICATION")
        nums = self.get_numbers()
        result = nums[0] * nums[1]
        operation = f"{nums[0]} × {nums[1]}"
        self.add_to_history(operation, result)
        print(f"✅ Result: {operation} = {result}")

    def division(self):
        print("\n➗ DIVISION")
        nums = self.get_numbers()
        if nums[1] == 0:
            print("❌ Error: Cannot divide by zero!")
            return
        result = nums[0] / nums[1]
        operation = f"{nums[0]} ÷ {nums[1]}"
        self.add_to_history(operation, result)
        print(f"✅ Result: {operation} = {result}")

    def power(self):
        print("\n💪 POWER")
        base = float(input("Enter base: "))
        exponent = float(input("Enter exponent: "))
        result = base ** exponent
        operation = f"{base}^{exponent}"
        self.add_to_history(operation, result)
        print(f"✅ Result: {operation} = {result}")

    def square_root(self):
        print("\n√ SQUARE ROOT")
        num = float(input("Enter number: "))
        if num < 0:
            print("❌ Error: Cannot calculate square root of negative number!")
            return
        result = math.sqrt(num)
        operation = f"√{num}"
        self.add_to_history(operation, result)
        print(f"✅ Result: {operation} = {result}")

    def scientific_menu(self):
        print("\n📊 SCIENTIFIC FUNCTIONS")
        print("1. sin(x)    2. cos(x)    3. tan(x)")
        print("4. log(x)    5. log10(x)  6. Factorial")
        print("7. Back to main menu")

        choice = input("Enter choice (1-7): ")

        if choice == '1':
            self.trig_function('sin')
        elif choice == '2':
            self.trig_function('cos')
        elif choice == '3':
            self.trig_function('tan')
        elif choice == '4':
            self.log_function('natural')
        elif choice == '5':
            self.log_function('base10')
        elif choice == '6':
            self.factorial()
        elif choice == '7':
            return
        else:
            print("❌ Invalid choice!")

    def trig_function(self, func_name):
        angle = float(input("Enter angle in degrees: "))
        radians = math.radians(angle)

        if func_name == 'sin':
            result = math.sin(radians)
        elif func_name == 'cos':
            result = math.cos(radians)
        elif func_name == 'tan':
            result = math.tan(radians)

        operation = f"{func_name}({angle}°)"
        self.add_to_history(operation, result)
        print(f"✅ Result: {operation} = {result}")

    def log_function(self, log_type):
        num = float(input("Enter number: "))
        if num <= 0:
            print("❌ Error: Logarithm undefined for non-positive numbers!")
            return

        if log_type == 'natural':
            result = math.log(num)
            operation = f"ln({num})"
        else:
            result = math.log10(num)
            operation = f"log10({num})"

        self.add_to_history(operation, result)
        print(f"✅ Result: {operation} = {result}")

    def factorial(self):
        num = int(input("Enter integer: "))
        if num < 0:
            print("❌ Error: Factorial undefined for negative numbers!")
            return

        result = math.factorial(num)
        operation = f"{num}!"
        self.add_to_history(operation, result)
        print(f"✅ Result: {operation} = {result}")

    def memory_menu(self):
        print(f"\n💾 MEMORY FUNCTIONS (Current: {self.memory})")
        print("1. Store to Memory (MC)")
        print("2. Recall from Memory (MR)")
        print("3. Add to Memory (M+)")
        print("4. Back to main menu")

        choice = input("Enter choice (1-4): ")

        if choice == '1':
            self.memory = float(input("Enter value to store: "))
            print(f"✅ Memory stored: {self.memory}")
        elif choice == '2':
            print(f"📋 Memory recall: {self.memory}")
        elif choice == '3':
            value = float(input("Enter value to add: "))
            self.memory += value
            print(f"✅ Memory updated: {self.memory}")
        elif choice == '4':
            return
        else:
            print("❌ Invalid choice!")

# Create and run the calculator
calculator = ColabCalculator()
calculator.run()

# 🧮 Quick Expression Calculator for Colab
import math

def quick_calc():
    print("🚀 Quick Expression Calculator")
    print("Type mathematical expressions or 'quit' to exit\n")

    while True:
        try:
            expr = input("➡️  ")

            if expr.lower() == 'quit':
                break

            # Safe evaluation
            allowed = {
                'sqrt': math.sqrt, 'sin': math.sin, 'cos': math.cos, 'tan': math.tan,
                'log': math.log, 'log10': math.log10, 'pi': math.pi, 'e': math.e,
                '__builtins__': {}
            }

            result = eval(expr, allowed)
            print(f"🎯 = {result}\n")

        except Exception as e:
            print(f"❌ Error: {e}\n")

# Run quick calculator
quick_calc()

# 🧮 Colab Calculator
import math

def colab_calculator():
    print("🧮 Google Colab Calculator")
    print("=" * 40)
    print("Operations: +, -, *, /, %, **, //")
    print("Functions: sqrt(), sin(), cos(), tan(), log()")
    print("Type 'help' for more info, 'quit' to exit")
    print("=" * 40)

    while True:
        try:
            # Get user input
            user_input = input("\n📝 Enter calculation: ").strip()

            if user_input.lower() == 'quit':
                print("👋 Goodbye!")
                break
            elif user_input.lower() == 'help':
                show_help()
                continue
            elif not user_input:
                continue

            # Process the input
            result = process_calculation(user_input)
            print(f"✅ Result: {result}")

        except Exception as e:
            print(f"❌ Error: {e}")

def show_help():
    print("\n📖 Calculator Help:")
    print("Basic: 2 + 3, 10 * 5, 15 / 3")
    print("Power: 2 ** 8, 10 ** 2")
    print("Square root: sqrt(16)")
    print("Trigonometry: sin(30), cos(45), tan(60)")
    print("Logarithm: log(100)")
    print("Modulo: 10 % 3")
    print("Floor division: 10 // 3")

def process_calculation(expression):
    # Safe evaluation with allowed functions
    allowed_functions = {
        'sqrt': math.sqrt,
        'sin': math.sin,
        'cos': math.cos,
        'tan': math.tan,
        'log': math.log,
        'log10': math.log10,
        'pi': math.pi,
        'e': math.e
    }

    # Add math constants and functions
    safe_dict = {**allowed_functions, **math.__dict__}
    safe_dict['__builtins__'] = {}

    # Compile and evaluate
    try:
        result = eval(expression, safe_dict)
        return result
    except ZeroDivisionError:
        raise ValueError("Division by zero is not allowed")
    except SyntaxError:
        raise ValueError("Invalid expression syntax")
    except NameError as e:
        raise ValueError(f"Unknown function or variable: {e}")

# Run the calculator
colab_calculator()

